import discord
from discord.ext import commands
import asyncio
import yt_dlp
import os
import datetime 

# --- C·∫•u h√¨nh Colors v√† Emoji ---
COLOR_SUCCESS = 0x20ff00  # M√†u xanh l√° c√¢y #20ff00
COLOR_ERROR = 0xff0000    # M√†u ƒë·ªè #ff0000

EMOJI_ERROR = "‚ùåÔ∏è"
EMOJI_PROCESSING = "üîÑ"
EMOJI_PLAYING = "üé∂"
EMOJI_QUEUE = "üìã"
EMOJI_PAUSE = "‚è∏Ô∏è" 
EMOJI_WAVE = "üëã" 
EMOJI_LEAVE = "üö™" 
EMOJI_SKIP = "‚è≠Ô∏è" 
EMOJI_HEART = "‚ù§" 

# L·∫•y ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi ƒë·∫øn file cookie
COOKIE_FILE_PATH = os.path.join(os.getcwd(), 'cookies.txt')

# C·∫•u h√¨nh yt_dlp v√† FFmpeg
YTDL_OPTIONS = {
    'format': 'bestaudio/best',
    'noplaylist': True,
    'quiet': True,
    'extractaudio': True,
    'audioformat': 'mp3',
    'outtmpl': '%(extractor)s-%(id)s-%(title)s.%(ext)s',
    'restrictfilenames': True,
    'nocheckcertificate': True,
    'ignoreerrors': False,
    'logtostderr': False,
    'no_warnings': True,
    'default_search': 'auto',
    'source_address': '0.0.0.0',
    'cookiefile': COOKIE_FILE_PATH,
}

FFMPEG_OPTIONS = {
    'before_options': '-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5',
    'options': '-vn'
}

# H√†m ti·ªán √≠ch ƒë·ªÉ ƒë·ªãnh d·∫°ng th·ªùi l∆∞·ª£ng t·ª´ gi√¢y sang MM:SS ho·∫∑c HH:MM:SS
def format_duration(seconds):
    if seconds is None:
        return "N/A"
    minutes, seconds = divmod(int(seconds), 60)
    hours, minutes = divmod(minutes, 60)
    if hours:
        return f"{hours:02}:{minutes:02}:{seconds:02}"
    return f"{minutes:02}:{seconds:02}"

# Custom check ƒë·ªÉ ki·ªÉm tra quy·ªÅn "music commander"
def is_music_commander():
    async def predicate(ctx):
        player = ctx.cog.get_player(ctx)
        # N·∫øu bot kh√¥ng trong k√™nh tho·∫°i ho·∫∑c ch∆∞a c√≥ ng∆∞·ªùi ƒëi·ªÅu khi·ªÉn, th√¨ kh√¥ng ai c√≥ quy·ªÅn d√πng l·ªánh n√†y
        if not player.voice_client or not player.voice_client.is_connected() or player._commander_id is None:
            return False # S·∫Ω g√¢y ra commands.CheckFailure
        
        # Ch·ªâ ng∆∞·ªùi d√πng c√≥ ID kh·ªõp v·ªõi _commander_id m·ªõi ƒë∆∞·ª£c ph√©p
        return ctx.author.id == player._commander_id
    return commands.check(predicate)

# L·ªõp MusicPlayer ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i nh·∫°c cho t·ª´ng guild
class MusicPlayer:
    def __init__(self, bot):
        self.bot = bot
        self.queue = asyncio.Queue()  
        self.current_track = None     
        self.voice_client = None      
        self._player_task = None      
        self._inactivity_timer = None 
        self._commander_id = None # ID c·ªßa ng∆∞·ªùi ƒëi·ªÅu khi·ªÉn nh·∫°c

    async def player_task(self):
        while True:
            try:
                # ƒê·∫£m b·∫£o bot ƒëang ph√°t ho·∫∑c t·∫°m d·ª´ng tr∆∞·ªõc khi l·∫•y b√†i m·ªõi, ho·∫∑c l√† queue tr·ªëng
                if not self.voice_client or (not self.voice_client.is_playing() and not self.voice_client.is_paused() and not self.queue.empty()):
                    self.cancel_inactivity_timer()
                
                # Lu√¥n l·∫•y b√†i h√°t ti·∫øp theo khi kh√¥ng c√≥ b√†i n√†o ƒëang ph√°t
                if not self.voice_client or (not self.voice_client.is_playing() and not self.voice_client.is_paused()):
                    self.current_track = await self.queue.get() 

                # X·ª≠ l√Ω khi bot m·∫•t k·∫øt n·ªëi (b·ªã kick, network issue, ...)
                if not self.voice_client or not self.voice_client.is_connected():
                    print("Bot m·∫•t k·∫øt n·ªëi tho·∫°i, d·ª´ng player_task.")
                    
                    self.current_track = None
                    self.queue = asyncio.Queue() 
                    if self._player_task and not self._player_task.done():
                        pass 
                    self.cancel_inactivity_timer()
                    self._commander_id = None
                    self.voice_client = None 
                    break 

                ctx = self.current_track['ctx']
                url = self.current_track['url']
                title = self.current_track['title']
                original_url = self.current_track['original_url']
                
                # ƒêI·ªÄU CH·ªàNH: G·ª≠i th√¥ng b√°o "ƒêang ph√°t" t·∫°i ƒë√¢y cho M·ªåI b√†i h√°t
                embed = discord.Embed(
                    description=f"### {EMOJI_PLAYING}|ƒëang Ph√°t [{title}]({original_url})",
                    color=COLOR_SUCCESS
                )
                try:
                    # N·∫øu c√≥ response_msg t·ª´ l·ªánh play, ch·ªânh s·ª≠a n√≥
                    if 'response_msg' in self.current_track and self.current_track['response_msg']:
                        await self.current_track['response_msg'].edit(embed=embed)
                        # Sau khi ch·ªânh s·ª≠a, x√≥a n√≥ ƒëi ƒë·ªÉ c√°c b√†i sau g·ª≠i tin nh·∫Øn m·ªõi
                        self.current_track['response_msg'] = None 
                    else: # N·∫øu kh√¥ng c√≥ response_msg (b√†i ti·∫øp theo trong queue), g·ª≠i tin nh·∫Øn m·ªõi
                        await ctx.send(embed=embed)
                except discord.HTTPException as e: # Log chi ti·∫øt l·ªói HTTP
                    print(f"L·ªói HTTP khi g·ª≠i tin nh·∫Øn 'ƒëang ph√°t' cho b√†i '{title}' ·ªü guild {ctx.guild.id}: {e}.")
                except Exception as e: # Log l·ªói kh√¥ng x√°c ƒë·ªãnh
                    print(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ª≠i tin nh·∫Øn 'ƒëang ph√°t' cho b√†i '{title}' ·ªü guild {ctx.guild.id}: {e}.")
                
                source = discord.FFmpegPCMAudio(url, **FFMPEG_OPTIONS)
                self.voice_client.play(source, after=lambda e: asyncio.run_coroutine_threadsafe(self._after_playing(ctx, e), self.bot.loop).result())

                while self.voice_client.is_playing() or self.voice_client.is_paused():
                    await asyncio.sleep(1)

            except asyncio.CancelledError:
                print("player_task ƒë√£ b·ªã h·ªßy.")
                # N·∫øu c√≥ response_msg c√≤n s√≥t l·∫°i khi h·ªßy, ch·ªânh s·ª≠a n√≥
                if self.current_track and 'response_msg' in self.current_track and self.current_track['response_msg']:
                    try:
                        embed = discord.Embed(
                            description=f"### {EMOJI_ERROR}|Ho·∫°t ƒë·ªông ph√°t nh·∫°c ƒë√£ b·ªã h·ªßy.",
                            color=COLOR_ERROR
                        )
                        await self.current_track['response_msg'].edit(embed=embed)
                    except discord.HTTPException:
                        pass
                self.current_track = None
                self.queue = asyncio.Queue() 
                self._commander_id = None 
                self.cancel_inactivity_timer()
                self.voice_client = None 
                break
            except Exception as e:
                print(f"L·ªói trong player_task: {e}")
                if self.voice_client and self.voice_client.is_playing():
                    self.voice_client.stop()
                
                if self.current_track and 'ctx' in self.current_track:
                    original_ctx = self.current_track['ctx']
                    embed = discord.Embed(
                        description=f"### {EMOJI_ERROR}|ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi ph√°t nh·∫°c: {e}",
                        color=COLOR_ERROR
                    )
                    try:
                        await original_ctx.send(embed=embed)
                    except discord.HTTPException as e_http: # Log chi ti·∫øt l·ªói HTTP
                        print(f"L·ªói HTTP khi g·ª≠i tin nh·∫Øn l·ªói kh√¥ng mong mu·ªën cho guild {original_ctx.guild.id}: {e_http}.")
                    except Exception as e_gen: # Log l·ªói kh√¥ng x√°c ƒë·ªãnh
                        print(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ª≠i tin nh·∫Øn l·ªói kh√¥ng mong mu·ªën cho guild {original_ctx.guild.id}: {e_gen}.")
                
                self.current_track = None 
                self.queue = asyncio.Queue() 
                self._commander_id = None 
                self.cancel_inactivity_timer() 
                self.voice_client = None 
                continue 

    async def _after_playing(self, ctx, error):
        """
        Callback ƒë∆∞·ª£c g·ªçi sau khi m·ªôt b√†i h√°t k·∫øt th√∫c.
        """
        if error:
            print(f'L·ªói khi ph√°t: {error}')
            embed = discord.Embed(
                description=f"### {EMOJI_ERROR}|ƒê√£ x·∫£y ra l·ªói khi ph√°t nh·∫°c: {error}",
                color=COLOR_ERROR
            )
            try: # B·ªï sung try-except cho l·ªói khi g·ª≠i tin nh·∫Øn l·ªói ph√°t nh·∫°c
                await ctx.send(embed=embed)
            except discord.HTTPException as e:
                print(f"L·ªói HTTP khi g·ª≠i tin nh·∫Øn l·ªói ph√°t nh·∫°c cho guild {ctx.guild.id}: {e}.")
            except Exception as e:
                print(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ª≠i tin nh·∫Øn l·ªói ph√°t nh·∫°c cho guild {ctx.guild.id}: {e}.")
        
        # Ki·ªÉm tra l·∫°i k·∫øt n·ªëi tr∆∞·ªõc khi ti·∫øp t·ª•c
        if self.voice_client and self.voice_client.is_connected():
            self.current_track = None
            self.queue.task_done()
            
            if self.queue.empty():
                if self.get_voice_channel_members() > 0:
                    embed_queue_empty = discord.Embed(
                        description=f"### {EMOJI_QUEUE}|Kh√¥ng C√≤n B√†i H√°t N√†o Trong Danh s√°ch Ph√°t.", 
                        color=COLOR_SUCCESS
                    )
                    try:
                        await ctx.send(embed=embed_queue_empty)
                    except discord.HTTPException as e: # Log chi ti·∫øt l·ªói HTTP
                        print(f"L·ªói HTTP khi g·ª≠i tin nh·∫Øn 'h√†ng ƒë·ª£i tr·ªëng' cho guild {ctx.guild.id}: {e}.")
                    except Exception as e: # Log l·ªói kh√¥ng x√°c ƒë·ªãnh
                        print(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ª≠i tin nh·∫Øn 'h√†ng ƒë·ª£i tr·ªëng' cho guild {ctx.guild.id}: {e}.")

                if self.get_voice_channel_members() == 0: 
                    print(f"Queue tr·ªëng v√† kh√¥ng c√≥ ai trong k√™nh. R·ªùi k√™nh {ctx.guild.id} ngay l·∫≠p t·ª©c.")
                    await self.voice_client.disconnect()
                    self.voice_client = None
                    self.cancel_inactivity_timer() 
                    self._commander_id = None # Reset commander khi r·ªùi k√™nh do kh√¥ng ho·∫°t ƒë·ªông
                    embed_leave_immediately = discord.Embed(
                        description=f"### {EMOJI_QUEUE}|Kh√¥ng C√≤n B√†i H√°t N√†o Trong Danh s√°ch Ph√°t. M√¨nh ƒêi ƒê√¢y.", 
                        color=COLOR_SUCCESS
                    )
                    try:
                        await ctx.send(embed=embed_leave_immediately)
                    except discord.HTTPException as e: # Log chi ti·∫øt l·ªói HTTP
                        print(f"L·ªói HTTP khi g·ª≠i tin nh·∫Øn 'r·ªùi k√™nh ngay l·∫≠p t·ª©c' cho guild {ctx.guild.id}: {e}.")
                    except Exception as e: # Log l·ªói kh√¥ng x√°c ƒë·ªãnh
                        print(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ª≠i tin nh·∫Øn 'r·ªùi k√™nh ngay l·∫≠p t·ª©c' cho guild {ctx.guild.id}: {e}.")
                else: 
                    self.start_inactivity_timer(ctx)
        else: # Bot ƒë√£ ng·∫Øt k·∫øt n·ªëi kh√¥ng mong mu·ªën (ho·∫∑c b·ªã ƒë√°/stop t·ª´ b√™n ngo√†i)
            self.current_track = None
            self.queue = asyncio.Queue() 
            if self._player_task and not self._player_task.done():
                self._player_task.cancel()
            self.cancel_inactivity_timer() 
            self._commander_id = None 
            self.voice_client = None 

    def get_voice_channel_members(self):
        """
        Ki·ªÉm tra s·ªë l∆∞·ª£ng th√†nh vi√™n (kh√¥ng ph·∫£i bot) trong k√™nh tho·∫°i c·ªßa bot.
        """
        if self.voice_client and self.voice_client.channel:
            members = [member for member in self.voice_client.channel.members if not member.bot]
            return len(members)
        return 0

    def start_inactivity_timer(self, ctx):
        """
        B·∫Øt ƒë·∫ßu h·∫πn gi·ªù ƒë·ªÉ bot r·ªùi k√™nh n·∫øu kh√¥ng c√≥ ai trong voice channel.
        """
        self.cancel_inactivity_timer() 
        print(f"B·∫Øt ƒë·∫ßu h·∫πn gi·ªù t·ª± ƒë·ªông r·ªùi k√™nh cho guild {ctx.guild.id}")
        self._inactivity_timer = self.bot.loop.create_task(self._inactivity_countdown(ctx))

    def cancel_inactivity_timer(self):
        """
        H·ªßy h·∫πn gi·ªù t·ª± ƒë·ªông r·ªùi k√™nh.
        """
        if self._inactivity_timer and not self._inactivity_timer.done():
            self._inactivity_timer.cancel()
            print("ƒê√£ h·ªßy h·∫πn gi·ªù t·ª± ƒë·ªông r·ªùi k√™nh.")
        self._inactivity_timer = None

    async def _inactivity_countdown(self, ctx):
        """
        ƒê·∫øm ng∆∞·ª£c th·ªùi gian ch·ªù tr∆∞·ªõc khi r·ªùi k√™nh.
        """
        await asyncio.sleep(60) # Ch·ªù 60 gi√¢y (1 ph√∫t)
        if self.voice_client and self.voice_client.is_connected():
            if self.queue.empty() and self.get_voice_channel_members() == 0:
                print(f"Kh√¥ng c√≥ ai trong k√™nh tho·∫°i v√† queue tr·ªëng sau 1 ph√∫t. R·ªùi k√™nh {ctx.guild.id}")
                await self.voice_client.disconnect()
                self.voice_client = None
                self.cancel_inactivity_timer()
                self._commander_id = None 
                embed = discord.Embed(
                    description=f"### {EMOJI_WAVE}|Kh√¥ng C√≥ Ai Nghe Nh·∫°c Th√¨ M√¨nh ƒêi ƒê√¢y.", 
                    color=COLOR_SUCCESS
                )
                try:
                    await ctx.send(embed=embed)
                except discord.HTTPException as e: # Log chi ti·∫øt l·ªói HTTP
                    print(f"L·ªói HTTP khi g·ª≠i tin nh·∫Øn 'kh√¥ng c√≥ ai nghe nh·∫°c' cho guild {ctx.guild.id}: {e}.")
                except Exception as e: # Log l·ªói kh√¥ng x√°c ƒë·ªãnh
                    print(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ª≠i tin nh·∫Øn 'kh√¥ng c√≥ ai nghe nh·∫°c' cho guild {ctx.guild.id}: {e}.")
            else:
                self.cancel_inactivity_timer()


# L·ªõp Cog ch·ª©a c√°c l·ªánh nh·∫°c
class Music(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.players = {}

    def get_player(self, ctx):
        """
        L·∫•y ho·∫∑c t·∫°o MusicPlayer cho guild hi·ªán t·∫°i.
        """
        if ctx.guild.id not in self.players:
            self.players[ctx.guild.id] = MusicPlayer(self.bot)
        return self.players[ctx.guild.id]

    @commands.Cog.listener()
    async def on_ready(self):
        print("Cog Music ƒë√£ s·∫µn s√†ng!")

    # X·ª≠ l√Ω l·ªói khi ng∆∞·ªùi kh√¥ng ph·∫£i music commander s·ª≠ d·ª•ng l·ªánh b·ªã h·∫°n ch·∫ø
    @commands.Cog.listener()
    async def on_command_error(self, ctx, error):
        # Handle custom check failures
        if isinstance(error, commands.CheckFailure):
            embed = discord.Embed(
                description=f"### {EMOJI_ERROR}|B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y. Ch·ªâ ng∆∞·ªùi b·∫Øt ƒë·∫ßu ph√°t nh·∫°c m·ªõi c√≥ th·ªÉ.",
                color=COLOR_ERROR
            )
            await ctx.send(embed=embed)
        # N·∫øu mu·ªën x·ª≠ l√Ω c√°c lo·∫°i l·ªói kh√°c ho·∫∑c ƒë·ªÉ ch√∫ng t·ª± ƒë·ªông lan truy·ªÅn
        # else:
        #    raise error

    # L·ªánh play (C√¥ng khai)
    @commands.command(name='play', aliases=['p'])
    async def play(self, ctx, *, search_term=None):
        player = self.get_player(ctx)
        response_msg = None 

        if not search_term:
            embed = discord.Embed(
                description=f"### {EMOJI_ERROR}|Vui L√≤ng Cung C·∫•p URL Ho·∫∑c T√™n B√†i H√°t.",
                color=COLOR_ERROR
            )
            await ctx.send(embed=embed)
            return

        if not ctx.message.author.voice:
            embed = discord.Embed(
                description=f"### {EMOJI_ERROR}|Vui L√≤ng V√†o K√™nh Tho·∫°i ƒê·ªÉ Ti·∫øp T·ª•c.",
                color=COLOR_ERROR
            )
            await ctx.send(embed=embed)
            return

        if not player.voice_client: # Bot kh√¥ng ·ªü trong k√™nh tho·∫°i, ƒë√¢y l√† l·∫ßn ƒë·∫ßu ti√™n k·∫øt n·ªëi
            channel = ctx.message.author.voice.channel
            player.voice_client = await channel.connect()
            
            if not player._player_task or player._player_task.done():
                player._player_task = self.bot.loop.create_task(player.player_task())
            
            player._commander_id = ctx.author.id
            print(f"Ng∆∞·ªùi d√πng {ctx.author.name} (ID: {ctx.author.id}) ƒë√£ tr·ªü th√†nh music commander cho guild {ctx.guild.id}")

        elif ctx.author.voice and ctx.author.voice.channel != player.voice_client.channel:
            embed = discord.Embed(
                description=f"### {EMOJI_ERROR}|B·∫°n ph·∫£i ·ªü trong k√™nh tho·∫°i `{player.voice_client.channel.name}` ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y.",
                color=COLOR_ERROR
            )
            await ctx.send(embed=embed)
            return

        embed = discord.Embed(
            description=f"### {EMOJI_PROCESSING}|ƒêang X·ª≠ L√Ω. Vui L√≤ng Ch·ªù...",
            color=COLOR_SUCCESS 
        )
        response_msg = await ctx.send(embed=embed)

        try:
            with yt_dlp.YoutubeDL(YTDL_OPTIONS) as ydl:
                info = ydl.extract_info(search_term, download=False)
                
                if 'entries' in info:
                    if not info['entries']:
                        embed = discord.Embed(
                            description=f"### {EMOJI_ERROR}|Kh√¥ng T√¨m Th·∫•y B√†i H√°t B·∫°n Mong Mu·ªën.",
                            color=COLOR_ERROR
                        )
                        if response_msg: await response_msg.edit(embed=embed)
                        else: await ctx.send(embed=embed)
                        return
                    info = info['entries'][0]

                if not info:
                    embed = discord.Embed(
                        description=f"### {EMOJI_ERROR}|Kh√¥ng T√¨m Th·∫•y B√†i H√°t B·∫°n Mong Mu·ªën.",
                        color=COLOR_ERROR
                    )
                    if response_msg: await response_msg.edit(embed=embed)
                    else: await ctx.send(embed=embed)
                    return

                url2 = info.get('url', info['formats'][0]['url'])
                title = info.get("title", "Kh√¥ng r√µ")
                original_url = info.get("webpage_url", "https://youtube.com")
                duration = info.get("duration")

                track_data = {
                    'ctx': ctx, 
                    'url': url2, 
                    'title': title, 
                    'original_url': original_url,
                    'duration': duration, 
                    'response_msg': response_msg # Truy·ªÅn response_msg ƒë·ªÉ player_task ch·ªânh s·ª≠a
                }

                await player.queue.put(track_data)
                
                # Kh√¥ng g·ª≠i tin nh·∫Øn "ƒê√£ th√™m v√†o danh s√°ch ph√°t" hay "ƒêang chu·∫©n b·ªã"
                # n·ªØa m√† ƒë·ªÉ player_task lo li·ªáu
                # (L·ªánh play ch·ªâ g·ª≠i "ƒêang x·ª≠ l√Ω..." ban ƒë·∫ßu v√† response_msg s·∫Ω ƒë∆∞·ª£c s·ª≠a b·ªüi player_task)
                    
        except Exception as e:
            print(f"L·ªói YTDL: {e}")
            embed = discord.Embed(
                description=f"### {EMOJI_ERROR}|ƒê√£ x·∫£y ra l·ªói khi t√¨m ki·∫øm ho·∫∑c th√™m nh·∫°c: {e}",
                color=COLOR_ERROR
            )
            if response_msg: await response_msg.edit(embed=embed)
            else: await ctx.send(embed=embed)

    # L·ªánh queue/playlist (C√¥ng khai)
    @commands.command(name='queue', aliases=['playlist']) 
    async def queue_command(self, ctx):
        """
        Hi·ªÉn th·ªã b√†i h√°t ƒëang ph√°t v√† danh s√°ch c√°c b√†i h√°t trong h√†ng ƒë·ª£i.
        """
        player = self.get_player(ctx)

        if not player.voice_client or not player.voice_client.is_connected():
            embed = discord.Embed(
                description=f"### {EMOJI_ERROR}|Bot kh√¥ng ·ªü trong k√™nh tho·∫°i n√†o c·∫£.",
                color=COLOR_ERROR
            )
            await ctx.send(embed=embed)
            return

        if not player.current_track and player.queue.empty():
            embed = discord.Embed(
                title=f"{EMOJI_QUEUE}**|Danh S√°ch Ph√°t!**",
                description=f"Kh√¥ng c√≥ b√†i h√°t.", 
                color=COLOR_ERROR
            )
            await ctx.send(embed=embed)
            return

        description = ""
        if player.current_track:
            status_emoji = EMOJI_PAUSE if player.voice_client.is_paused() else EMOJI_PLAYING
            current_duration_str = format_duration(player.current_track['duration']) if player.current_track['duration'] else "N/A"

            description += f"### {status_emoji}|ƒêang Ph√°t:\n"
            description += f"`{current_duration_str}` | [{player.current_track['title']}]({player.current_track['original_url']})\n"
        
        if not player.queue.empty():
            description += f"### {EMOJI_QUEUE}|Danh s√°ch Ph√°t:\n"
            queued_songs = list(player.queue._queue) 
            
            for i, track in enumerate(queued_songs):
                duration_str = format_duration(track['duration'])
                description += f"`{duration_str}` | [{track['title']}]({track['original_url']})\n"
                if i >= 9: 
                    description += f"... v√† {player.queue.qsize() - (i + 1)} b√†i kh√°c.\n"
                    break

        embed = discord.Embed(
            title=f"{EMOJI_QUEUE}**|Danh S√°ch Ph√°t!**",
            description=description,
            color=COLOR_SUCCESS
        )
        await ctx.send(embed=embed)

    # L·ªánh skip (Ch·ªâ Music Commander)
    @commands.command(name='skip', aliases=['s'])
    @is_music_commander() 
    async def skip_command(self, ctx):
        """
        B·ªè qua b√†i h√°t hi·ªán t·∫°i. (Ch·ªâ ng∆∞·ªùi b·∫Øt ƒë·∫ßu ph√°t nh·∫°c)
        """
        player = self.get_player(ctx)

        if not player.voice_client or not player.voice_client.is_connected():
            embed = discord.Embed(
                description=f"### {EMOJI_ERROR}|Bot kh√¥ng ·ªü trong k√™nh tho·∫°i n√†o c·∫£.",
                color=COLOR_ERROR
            )
            await ctx.send(embed=embed)
            return

        if not player.voice_client.is_playing() and not player.voice_client.is_paused():
            embed = discord.Embed(
                description=f"### {EMOJI_ERROR}|Bot hi·ªán kh√¥ng ph√°t nh·∫°c.",
                color=COLOR_ERROR
            )
            await ctx.send(embed=embed)
            return
        
        if ctx.author.voice and ctx.author.voice.channel != player.voice_client.channel:
            embed = discord.Embed(
                description=f"### {EMOJI_ERROR}|B·∫°n ph·∫£i ·ªü trong k√™nh tho·∫°i `{player.voice_client.channel.name}` ƒë·ªÉ b·ªè qua b√†i h√°t.",
                color=COLOR_ERROR
            )
            await ctx.send(embed=embed)
            return

        skipped_track_title = "Kh√¥ng r√µ"
        skipped_track_url = "#" 
        if player.current_track:
            skipped_track_title = player.current_track['title']
            skipped_track_url = player.current_track['original_url']

        player.voice_client.stop()

        embed = discord.Embed(
            description=f"### {EMOJI_SKIP}|[{skipped_track_title}]({skipped_track_url}) ƒê√£ ƒê∆∞·ª£c B·ªè Qua.",
            color=COLOR_SUCCESS
        )
        await ctx.send(embed=embed)

    # L·ªánh stop (Ch·ªâ Music Commander)
    @commands.command(name='stop')
    @is_music_commander() 
    async def stop_command(self, ctx):
        """
        D·ª´ng ph√°t nh·∫°c v√† ng·∫Øt k·∫øt n·ªëi bot kh·ªèi k√™nh tho·∫°i. (Ch·ªâ ng∆∞·ªùi b·∫Øt ƒë·∫ßu ph√°t nh·∫°c)
        """
        player = self.get_player(ctx)

        if not player.voice_client or not player.voice_client.is_connected():
            embed = discord.Embed(
                description=f"### {EMOJI_ERROR}|Bot kh√¥ng ·ªü trong k√™nh tho·∫°i n√†o c·∫£.",
                color=COLOR_ERROR
            )
            await ctx.send(embed=embed)
            return

        if ctx.author.voice and ctx.author.voice.channel != player.voice_client.channel:
            embed = discord.Embed(
                description=f"### {EMOJI_ERROR}|B·∫°n ph·∫£i ·ªü trong k√™nh tho·∫°i `{player.voice_client.channel.name}` ƒë·ªÉ d·ª´ng nh·∫°c.",
                color=COLOR_ERROR
            )
            await ctx.send(embed=embed)
            return
        
        if player.voice_client.is_playing() or player.voice_client.is_paused():
            player.voice_client.stop()
        
        player.queue = asyncio.Queue()
        player.current_track = None

        if player._player_task and not player._player_task.done():
            player._player_task.cancel()
        player.cancel_inactivity_timer()

        await player.voice_client.disconnect()
        player.voice_client = None 
        player._commander_id = None # Reset commander sau khi d·ª´ng

        embed = discord.Embed(
            description=f"### {EMOJI_HEART}|C·∫£m ∆°n B·∫°n ƒê√£ Nghe Nh·∫°c C√πng Bot",
            color=COLOR_SUCCESS
        )
        await ctx.send(embed=embed)


# H√†m setup B·∫ÆT BU·ªòC ƒë·ªÉ bot c√≥ th·ªÉ t·∫£i Cog n√†y
async def setup(bot):
    await bot.add_cog(Music(bot))
